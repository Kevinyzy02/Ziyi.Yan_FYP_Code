#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/8af2c513-650a-4f29-8b63-11b8efcf2d4e 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float setRHHigh;
  float setRHLow;
  float setTempHigh;
  float setTempLow;
  bool a1H;
  bool a1L;
  bool a1M;
  bool a2H;
  bool a2L;
  bool a2M;
  bool b1H;
  bool b1L;
  bool b1M;
  bool b2H;
  bool b2L;
  bool b2M;
  bool c1H;
  bool c1L;
  bool c1M;
  bool c2H;
  bool c2L;
  bool c2M;
  bool d1H;
  bool d1L;
  bool d1M;
  bool d2H;
  bool d2L;
  bool d2M;
  bool e1H;
  bool e1L;
  bool e1M;
  bool e2H;
  bool e2L;
  bool e2M;
  bool runStatus;
  bool start;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <ESP8266WiFi.h>
#include <ArduinoIoTCloud.h>

const char* ssid = "KevinBB";
const char* password = "yanziyi02";


bool temperatureSet = false;
bool humiditySet = false;



void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 


    // Connect to WiFi network
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println("WiFi connected.");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Initialize properties from the cloud
  initProperties();
  
  // Set the device ID for the cloud connection
  ArduinoCloud.setThingId("fae5f3eb-6c28-4a57-897a-bc05a5b9d479");

  // Begin the cloud connection
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  // Optionally you can set a function to be called when the device is connected to the cloud
  ArduinoCloud.addCallback(ArduinoIoTCloudEvent::CONNECT, onIoTCloudConnected);

  // Optionally set a function to be called when the device is disconnected from the cloud
  ArduinoCloud.addCallback(ArduinoIoTCloudEvent::DISCONNECT, onIoTCloudDisconnected);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  //initialize
  a1L=false;
  a1M=false;
  a1H=false;
  
  b1L=false;
  b1M=false;
  b1H=false;
  
  c1L=false;
  c1M=false;
  c1H=false;
  
  d1L=false;
  d1M=false;
  d1H=false;
  
  e1L=false;
  e1M=false;
  e1H=false;
  
  a2L=false;
  a2M=false;
  a2H=false;
  
  b2L=false;
  b2M=false;
  b2H=false;
  
  c2L=false;
  c2M=false;
  c2H=false;
  
  d2L=false;
  d2M=false;
  d2H=false;
  
  e2L=false;
  e2M=false;
  e2H=false;
  
  runStatus=false;

}

void onIoTCloudConnected() {
  Serial.println("Connected to Arduino IoT Cloud");
}

void onIoTCloudDisconnected() {
  Serial.println("Disconnected from Arduino IoT Cloud");
}

void loop() {
  ArduinoCloud.update();
  
  if (Serial.available()) {
    String receivedData = Serial.readStringUntil('\n');
    Serial.println(receivedData);
    parseAndCompareData(receivedData);
  }
  
}

void parseAndCompareData(String data) {
  int firstComma = data.indexOf(',');
  int lastComma = data.lastIndexOf(',');
  int zone = data.substring(0, firstComma).toInt();
  float averageTemp = data.substring(firstComma + 1, lastComma).toFloat();
  float averageHumidity = data.substring(lastComma + 1).toFloat();

  updateZoneStatus(zone, averageTemp, averageHumidity);
}

void updateZoneStatus(int zone, float averageTemp, float averageHumidity) {
  int TempRiskScore = averageTemp >= setTempHigh ? 4 : averageTemp >= setTempLow ? 1 : 0;
  int RHRiskScore = averageHumidity >= setRHHigh ? 4 : averageHumidity >= setRHLow ? 1 : 0;
  int TotalScore = TempRiskScore + RHRiskScore;

  boolean highRisk = TotalScore >= 4;
  boolean medRisk = TotalScore == 1 || TotalScore == 2;
  boolean lowRisk = TotalScore == 0;

  switch (zone) {
    case 0:
      a1H = highRisk;
      a1M = medRisk;
      a1L = lowRisk;
      break;
    case 1:
      b1H = highRisk;
      b1M = medRisk;
      b1L = lowRisk;
      break;
    case 2:
      c1H = highRisk;
      c1M = medRisk;
      c1L = lowRisk;
      break;
    case 3:
      d1H = highRisk;
      d1M = medRisk;
      d1L = lowRisk;
      break;
    case 4:
      e1H = highRisk;
      e1M = medRisk;
      e1L = lowRisk;
      break;
    case 5:
      e2H = highRisk;
      e2M = medRisk;
      e2L = lowRisk;
      break;
    case 6:
      d2H = highRisk;
      d2M = medRisk;
      d2L = lowRisk;
      break;
    case 7:
      c2H = highRisk;
      c2M = medRisk;
      c2L = lowRisk;
      break;
    case 8:
      b2H = highRisk;
      b2M = medRisk;
      b2L = lowRisk;
      break;
    case 9:
      a2H = highRisk;
      a2M = medRisk;
      a2L = lowRisk;
      runStatus=false;
      break;
    default:
      break;
  }
}

/*
  Since SetTempLow is READ_WRITE variable, onSetTempLowChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSetTempLowChange()  {
  // Add your code here to act upon SetTempLow change
}

/*
  Since SetTempHigh is READ_WRITE variable, onSetTempHighChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSetTempHighChange()  {
  // Add your code here to act upon SetTempHigh change
}

/*
  Since SetRHLow is READ_WRITE variable, onSetRHLowChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSetRHLowChange()  {
  // Add your code here to act upon SetRHLow change
}

/*
  Since SetRHHigh is READ_WRITE variable, onSetRHHighChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSetRHHighChange()  {
  // Add your code here to act upon SetRHHigh change
}

/*
  Since Start is READ_WRITE variable, onStartChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onStartChange()  {
  if (start) { // Assuming 'start' is the variable tied to your start button
     //initialize
  a1L=false;
  a1M=false;
  a1H=false;
  
  b1L=false;
  b1M=false;
  b1H=false;
  
  c1L=false;
  c1M=false;
  c1H=false;
  
  d1L=false;
  d1M=false;
  d1H=false;
  
  e1L=false;
  e1M=false;
  e1H=false;
  
  a2L=false;
  a2M=false;
  a2H=false;
  
  b2L=false;
  b2M=false;
  b2H=false;
  
  c2L=false;
  c2M=false;
  c2H=false;
  
  d2L=false;
  d2M=false;
  d2H=false;
  
  e2L=false;
  e2M=false;
  e2H=false;
  
  runStatus=true;

    Serial.println("START");
  }
}

/*
  Since RunStatus is READ_WRITE variable, onRunStatusChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onRunStatusChange()  {
  // Add your code here to act upon RunStatus change
}

/*
  Since A1LOW is READ_WRITE variable, onA1LOWChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onA1LOWChange()  {
  // Add your code here to act upon A1LOW change
}

/*
  Since A1HIGH is READ_WRITE variable, onA1HIGHChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onA1HIGHChange()  {
  // Add your code here to act upon A1HIGH change
}

/*
  Since A1MID is READ_WRITE variable, onA1MIDChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onA1MIDChange()  {
  // Add your code here to act upon A1MID change
}

/*
  Since B1H is READ_WRITE variable, onB1HChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onB1HChange()  {
  // Add your code here to act upon B1H change
}

/*
  Since A1H is READ_WRITE variable, onA1HChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onA1HChange()  {
  // Add your code here to act upon A1H change
}

/*
  Since A1L is READ_WRITE variable, onA1LChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onA1LChange()  {
  // Add your code here to act upon A1L change
}

/*
  Since A1M is READ_WRITE variable, onA1MChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onA1MChange()  {
  // Add your code here to act upon A1M change
}

/*
  Since B2M is READ_WRITE variable, onB2MChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onB2MChange()  {
  // Add your code here to act upon B2M change
}

/*
  Since B1L is READ_WRITE variable, onB1LChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onB1LChange()  {
  // Add your code here to act upon B1L change
}

/*
  Since B1M is READ_WRITE variable, onB1MChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onB1MChange()  {
  // Add your code here to act upon B1M change
}

/*
  Since C1L is READ_WRITE variable, onC1LChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onC1LChange()  {
  // Add your code here to act upon C1L change
}

/*
  Since C1M is READ_WRITE variable, onC1MChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onC1MChange()  {
  // Add your code here to act upon C1M change
}

/*
  Since C1H is READ_WRITE variable, onC1HChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onC1HChange()  {
  // Add your code here to act upon C1H change
}

/*
  Since D1H is READ_WRITE variable, onD1HChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onD1HChange()  {
  // Add your code here to act upon D1H change
}

/*
  Since D1M is READ_WRITE variable, onD1MChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onD1MChange()  {
  // Add your code here to act upon D1M change
}

/*
  Since D1L is READ_WRITE variable, onD1LChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onD1LChange()  {
  // Add your code here to act upon D1L change
}

/*
  Since E1H is READ_WRITE variable, onE1HChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onE1HChange()  {
  // Add your code here to act upon E1H change
}

/*
  Since E1M is READ_WRITE variable, onE1MChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onE1MChange()  {
  // Add your code here to act upon E1M change
}

/*
  Since E1L is READ_WRITE variable, onE1LChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onE1LChange()  {
  // Add your code here to act upon E1L change
}

/*
  Since A2L is READ_WRITE variable, onA2LChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onA2LChange()  {
  // Add your code here to act upon A2L change
}

/*
  Since A2M is READ_WRITE variable, onA2MChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onA2MChange()  {
  // Add your code here to act upon A2M change
}

/*
  Since A2H is READ_WRITE variable, onA2HChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onA2HChange()  {
  // Add your code here to act upon A2H change
}

/*
  Since B2H is READ_WRITE variable, onB2HChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onB2HChange()  {
  // Add your code here to act upon B2H change
}


/*
  Since B2L is READ_WRITE variable, onB2LChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onB2LChange()  {
  // Add your code here to act upon B2L change
}

/*
  Since C2H is READ_WRITE variable, onC2HChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onC2HChange()  {
  // Add your code here to act upon C2H change
}

/*
  Since C2L is READ_WRITE variable, onC2LChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onC2LChange()  {
  // Add your code here to act upon C2L change
}

/*
  Since C2M is READ_WRITE variable, onC2MChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onC2MChange()  {
  // Add your code here to act upon C2M change
}

/*
  Since D2H is READ_WRITE variable, onD2HChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onD2HChange()  {
  // Add your code here to act upon D2H change
}

/*
  Since D2L is READ_WRITE variable, onD2LChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onD2LChange()  {
  // Add your code here to act upon D2L change
}

/*
  Since D2M is READ_WRITE variable, onD2MChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onD2MChange()  {
  // Add your code here to act upon D2M change
}

/*
  Since E2L is READ_WRITE variable, onE2LChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onE2LChange()  {
  // Add your code here to act upon E2L change
}

/*
  Since E2M is READ_WRITE variable, onE2MChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onE2MChange()  {
  // Add your code here to act upon E2M change
}

/*
  Since E2H is READ_WRITE variable, onE2HChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onE2HChange()  {
  // Add your code here to act upon E2H change
}